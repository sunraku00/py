import datetime
import os
from abc import ABC, abstractmethod

# Implementasi Polimorfisme untuk Pembayaran
class Pembayaran(ABC):
    @abstractmethod
    def proses_pembayaran(self, jumlah):
        pass
    
    @abstractmethod
    def get_info_pembayaran(self):
        pass

class PembayaranCash(Pembayaran):
    def proses_pembayaran(self, jumlah):
        print(f"Memproses pembayaran tunai sebesar Rp {jumlah:,}")
        print("Silakan siapkan uang tunai yang pas.")
        return True
    
    def get_info_pembayaran(self):
        return "Cash"

class PembayaranDebit(Pembayaran):
    def proses_pembayaran(self, jumlah):
        print(f"Memproses pembayaran debit sebesar Rp {jumlah:,}")
        print("Silakan masukkan kartu debit dan PIN Anda.")
        return True
    
    def get_info_pembayaran(self):
        return "Debit"

class PembayaranTransfer(Pembayaran):
    def proses_pembayaran(self, jumlah):
        print(f"Memproses pembayaran transfer sebesar Rp {jumlah:,}")
        print("Silakan transfer ke rekening: 1234567890 (Bank ABC)")
        return True
    
    def get_info_pembayaran(self):
        return "Transfer"

# Implementasi Polimorfisme untuk Tipe Kamar
class BaseKamar(ABC):
    def __init__(self, nomor, harga):
        self.nomor = nomor
        self.harga = harga
    
    @abstractmethod
    def get_fasilitas(self):
        pass
    
    @abstractmethod
    def get_tipe(self):
        pass
    
    def get_info_lengkap(self):
        return f"{self.get_tipe()} - Nomor: {self.nomor} - Rp {self.harga:,}/malam"

class StandardRoom(BaseKamar):
    def get_fasilitas(self):
        return ["Kasur nyaman ukuran Queen", "AC & Wi-Fi gratis", "TV LED 32 inci", "Kamar mandi dengan shower"]
    
    def get_tipe(self):
        return "Standard Room"

class DeluxeRoom(BaseKamar):
    def get_fasilitas(self):
        return ["Kasur ukuran King", "AC & Wi-Fi", "TV LED 42 inci dengan layanan streaming", "Kamar mandi dengan bathtub", "Balkon"]
    
    def get_tipe(self):
        return "Deluxe Room (single bed)"

class FamilyRoom2Bed(BaseKamar):
    def get_fasilitas(self):
        return ["2 Kasur ukuran Queen", "AC & Wi-Fi", "TV LED 50 inci dengan layanan streaming", "Kamar mandi luas dengan bathtub", "Ruang tamu kecil", "Sarapan gratis"]
    
    def get_tipe(self):
        return "Family Room (2 tempat tidur)"

class FamilyRoom3Bed(BaseKamar):
    def get_fasilitas(self):
        return ["3 Kasur ukuran Queen", "AC & Wi-Fi", "TV LED 50 inci dengan layanan streaming", "Kamar mandi luas dengan bathtub", "Ruang tamu kecil", "Sarapan gratis"]
    
    def get_tipe(self):
        return "Family Room (3 tempat tidur)"

# Implementasi Polimorfisme untuk Struk/Receipt
class BaseStruk(ABC):
    def __init__(self, data_pemesanan):
        self.data = data_pemesanan
    
    @abstractmethod
    def tampilkan_header(self):
        pass
    
    @abstractmethod
    def tampilkan_detail(self):
        pass
    
    def tampilkan_struk(self):
        self.tampilkan_header()
        self.tampilkan_detail()
        self.tampilkan_footer()
    
    def tampilkan_footer(self):
        print("===========================================================")

class StrukCheckin(BaseStruk):
    def tampilkan_header(self):
        print("\n===========================================================")
        print("                      Penginapan Choco                       ")
        print("             Jl. Coklat Manis No. 5, Surabaya                ")
        print("                   Telp: (031) 888-9999                      ")
        print("                        STRUK CHECK-IN                        ")
        print("===========================================================")
    
    def tampilkan_detail(self):
        print(f"\nNama Tamu          : {self.data.nama}")
        print(f"No. Telepon        : {self.data.get_telepon()}")
        print(f"NIK                : {self.data.get_nik()}")
        
        print("\nDetail kamar yang dipesan:")
        for idx, kamar in enumerate(self.data.kamar_dipesan, 1):
            print(f" {idx}. {kamar.get_info_lengkap()}")
        
        print(f"\nCheck-in           : {self.data.waktu_checkin.strftime('%d %B %Y (%H.%M)')}")
        print(f"Check-out          : {self.data.checkout.strftime('%d %B %Y (12.00)')}")
        print(f"Lama Menginap      : {self.data.lama_menginap} malam")
        
        print("\n--- INFORMASI PEMBAYARAN ---")
        print(f"Total Harga        : Rp {self.data.total_harga:,}")
        
        if self.data.status_pembayaran == "DP":
            print("Status Pembayaran  : DP 50%")
            print(f"DP Dibayar         : Rp {self.data.dp_dibayar:,}")
            print(f"Metode Pembayaran  : {self.data.metode_pembayaran.get_info_pembayaran()}")
            print(f"Sisa Pembayaran    : Rp {self.data.sisa_pembayaran:,}")
            print("(Sisa akan dibayar saat checkout)")
        else:
            print("Status Pembayaran  : LUNAS")
            print(f"Metode Pembayaran  : {self.data.metode_pembayaran.get_info_pembayaran()}")

class StrukCheckout(BaseStruk):
    def tampilkan_header(self):
        print("\n===========================================================")
        print("                      Penginapan Choco                       ")
        print("             Jl. Coklat Manis No. 5, Surabaya                ")
        print("                   Telp: (031) 888-9999                      ")
        print("                        STRUK CHECKOUT                        ")
        print("===========================================================")
    
    def tampilkan_detail(self):
        print(f"\nNama Tamu          : {self.data.nama}")
        print(f"No. Telepon        : {self.data.get_telepon()}")
        print(f"NIK                : {self.data.get_nik()}")
        
        print("\nDetail kamar yang dipesan:")
        for idx, kamar in enumerate(self.data.kamar_dipesan, 1):
            print(f" {idx}. {kamar.get_info_lengkap()}")
        
        print(f"\nCheck-in           : {self.data.waktu_checkin.strftime('%d %B %Y (%H.%M)')}")
        print(f"Check-out          : {self.data.checkout.strftime('%d %B %Y (12.00)')}")
        print(f"Lama Menginap      : {self.data.lama_menginap} malam")
        
        print("\n--- RINCIAN PEMBAYARAN ---")
        subtotal = sum(kamar.harga for kamar in self.data.kamar_dipesan) * self.data.lama_menginap
        print(f"Subtotal Kamar     : Rp {subtotal:,}")
        
        if hasattr(self.data, 'metode_pelunasan'):
            dp_amount = subtotal // 2
            print(f"DP saat Check-in   : Rp {dp_amount:,} ({self.data.metode_pembayaran.get_info_pembayaran()})")
            print(f"Pelunasan Checkout : Rp {subtotal - dp_amount:,} ({self.data.metode_pelunasan.get_info_pembayaran()})")
        else:
            print(f"Pembayaran         : Rp {subtotal:,} ({self.data.metode_pembayaran.get_info_pembayaran()})")
        
        print(f"Biaya Keterlambatan: Rp {self.data.crash:,}")
        
        total_final = subtotal + self.data.crash
        print(f"Total Akhir        : Rp {total_final:,}")
        print("Status Pembayaran  : LUNAS")
        print("\nTerima kasih telah menginap di Penginapan Choco!")

class Kamar:
    def __init__(self):
        # Factory untuk membuat objek kamar
        self.kamar_factory = {
            "Standard Room": lambda nomor: StandardRoom(nomor, 150000),
            "Deluxe Room (single bed)": lambda nomor: DeluxeRoom(nomor, 225000),
            "Family Room (2 tempat tidur)": lambda nomor: FamilyRoom2Bed(nomor, 345000),
            "Family Room (3 tempat tidur)": lambda nomor: FamilyRoom3Bed(nomor, 410000)
        }
        
        self.tipe_kamar_list = list(self.kamar_factory.keys())
        
        self._nomor_kamar = {
            "Standard Room": ["1A", "2A", "3A", "4A", "5A"],
            "Deluxe Room (single bed)": ["2B", "2C", "3D"],
            "Family Room (2 tempat tidur)": ["3A", "3B", "3C"],
            "Family Room (3 tempat tidur)": ["4A", "4B", "4C"]
        }

    def buat_kamar(self, tipe, nomor):
        """Factory method untuk membuat objek kamar - implementasi polimorfisme"""
        if tipe in self.kamar_factory:
            return self.kamar_factory[tipe](nomor)
        else:
            raise ValueError(f"Tipe kamar {tipe} tidak dikenal")

    def tampil_info_kamar(self):
        print("Tipe Kamar yang Tersedia:")
        for i, tipe in enumerate(self.tipe_kamar_list, start=1):
            # Menggunakan polimorfisme - objek kamar yang berbeda memanggil method yang sama
            sample_kamar = self.buat_kamar(tipe, "SAMPLE")
            print(f"{i}. {sample_kamar.get_tipe()} - Rp {sample_kamar.harga:,}")
            for fasilitas in sample_kamar.get_fasilitas():
                print(f"   - {fasilitas}")

    def kamar_terisi(self):
        """Mendapatkan set kamar yang sedang terisi (belum checkout)"""
        terisi = set()
        try:
            with open("data_checkin.txt", "r") as file:
                for line in file:
                    data = line.strip().split(" | ")
                    if len(data) >= 14: 
                        status_checkout = data[13] if len(data) > 13 else "BELUM"
                        
                        if status_checkout == "BELUM":
                            kamar_data = data[14:]
                            for i in range(1, len(kamar_data), 3):  
                                if i < len(kamar_data):
                                    terisi.add(kamar_data[i])
        except FileNotFoundError:
            pass  
        except Exception as e:
            print(f"Error saat membaca data kamar: {e}")
        return terisi

    def tampil_status_kamar(self, tipe_kamar_dipilih):
        kamar_terisi = self.kamar_terisi()

        print("\nStatus kamar (TERISI / KOSONG):")
        for tipe in tipe_kamar_dipilih:
            print(f"\n{tipe}:")
            for kamar in self._nomor_kamar[tipe]:
                status = "TERISI" if kamar in kamar_terisi else "KOSONG"
                print(f"Kamar {kamar}: {status}")

        kamar_tersedia_per_tipe = {}
        for tipe in tipe_kamar_dipilih:
            kamar_tersedia_per_tipe[tipe] = [k for k in self._nomor_kamar[tipe] if k not in kamar_terisi]
        return kamar_tersedia_per_tipe

    def tampil_tabel_status_kamar(self):
        """Menampilkan status seluruh kamar dalam bentuk tabel"""
        kamar_terisi = self.kamar_terisi()
        
        max_kamar = max(len(kamar) for kamar in self._nomor_kamar.values())
        
        print("\n================ STATUS KAMAR PENGINAPAN CHOCO ================")
        header = "| Tipe Kamar".ljust(30) + " |"
        for i in range(max_kamar):
            header += f" K-{i+1} |"
        print(header)
        print("|" + "-" * 28 + "-|" + "-----+" * max_kamar)
        
        # Isi tabel
        for tipe in self.tipe_kamar_list:
            row = f"| {tipe}".ljust(30) + " |"
            kamar_list = self._nomor_kamar[tipe]
            
            for i in range(max_kamar):
                if i < len(kamar_list):
                    nomor = kamar_list[i]
                    status = "T" if nomor in kamar_terisi else "K"
                    cell = f" {nomor}/{status} |"
                else:
                    cell = "     |"  
                row += cell
            
            print(row)
        
        print("|" + "-" * 28 + "-|" + "-----+" * max_kamar)
        print("Keterangan: K = Kosong, T = Terisi")
        print("================================================================")


class Tamu:
    def __init__(self):
        self.nama = input("Masukkan nama pemesan: ")
        self._nik = input("Masukkan NIK: ")
        self._telepon = input("Masukkan No. Telepon: ")

    def get_nik(self):
        return self._nik

    def get_telepon(self):
        return self._telepon


class Pemesanan(Kamar, Tamu):
    def __init__(self):
        Kamar.__init__(self)
        Tamu.__init__(self)
        
        self.jumlah_pesanan = int(input("Masukkan jumlah kamar yang ingin dipesan: "))
        
        self.tipe_kamar_dipilih = []
        print("\nPilih tipe kamar untuk tiap kamar yang dipesan:")
        for i in range(self.jumlah_pesanan):
            print(f"\nPilihan tipe kamar ke-{i + 1}:")
            self.tampil_info_kamar()
            pilihan = input(f"Pilih tipe kamar (1-{len(self.tipe_kamar_list)}): ")
            while not pilihan.isdigit() or int(pilihan) not in range(1, len(self.tipe_kamar_list) + 1):
                print("Input tidak valid, silakan masukkan nomor yang benar.")
                pilihan = input(f"Pilih tipe kamar (1-{len(self.tipe_kamar_list)}): ")
            tipe_terpilih = self.tipe_kamar_list[int(pilihan) - 1]
            self.tipe_kamar_dipilih.append(tipe_terpilih)
        
        tipe_unik = sorted(set(self.tipe_kamar_dipilih))
        kamar_tersedia_per_tipe = self.tampil_status_kamar(tipe_unik)
        
        self.kamar_dipesan = []
        for i, tipe in enumerate(self.tipe_kamar_dipilih, start=1):
            kamar_tersedia = kamar_tersedia_per_tipe[tipe]
            if not kamar_tersedia:
                print(f"Maaf, tidak ada kamar kosong untuk tipe {tipe}. Silakan batalkan dan coba pesan ulang.")
                exit()
            
            nomor_kamar = input(f"Pilih nomor kamar {i} (tipe {tipe}): ")
            while nomor_kamar not in kamar_tersedia:
                print("Nomor kamar tidak valid atau sudah terisi. Silakan pilih ulang.")
                nomor_kamar = input(f"Pilih nomor kamar {i} (tipe {tipe}): ")
            
            kamar_tersedia.remove(nomor_kamar)
            
            # Menggunakan factory method untuk membuat objek kamar - polimorfisme
            kamar_obj = self.buat_kamar(tipe, nomor_kamar)
            self.kamar_dipesan.append(kamar_obj)
        
        tanggal = input("Masukkan tanggal check-in (TANGGAL-BULAN-TAHUN): ")
        jam = input("Masukkan jam check-in (JAM:MENIT): ")
        datetime_str = tanggal + " " + jam
        self.waktu_checkin = datetime.datetime.strptime(datetime_str, "%d-%m-%Y %H:%M")
        
        self.lama_menginap = int(input("Masukkan lama menginap (malam): "))
        
        self.total_harga = sum(kamar.harga for kamar in self.kamar_dipesan) * self.lama_menginap
        
        print(f"\nTotal harga: Rp {self.total_harga:,}")
        print("Pilihan pembayaran:")
        print("1. Bayar DP 50% sekarang")
        print("2. Bayar lunas sekarang")
        
        pilihan_bayar = input("Pilih opsi pembayaran (1/2): ")
        while pilihan_bayar not in ['1', '2']:
            print("Pilihan tidak valid.")
            pilihan_bayar = input("Pilih opsi pembayaran (1/2): ")
        
        # Pilih metode pembayaran - implementasi polimorfisme
        self.metode_pembayaran = self._pilih_metode_pembayaran()
        
        if pilihan_bayar == '1':
            self.status_pembayaran = "DP"
            self.dp_dibayar = self.total_harga // 2
            self.sisa_pembayaran = self.total_harga - self.dp_dibayar
            print(f"DP 50%: Rp {self.dp_dibayar:,}")
            print(f"Sisa pembayaran: Rp {self.sisa_pembayaran:,}")
            self.metode_pembayaran.proses_pembayaran(self.dp_dibayar)
        else:
            self.status_pembayaran = "LUNAS"
            self.dp_dibayar = self.total_harga
            self.sisa_pembayaran = 0
            self.metode_pembayaran.proses_pembayaran(self.total_harga)
        
        self.checkout = self.waktu_checkin + datetime.timedelta(days=self.lama_menginap)
        self.crash = 0
        
        self.id_transaksi = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
    
    def _pilih_metode_pembayaran(self):
        """Factory method untuk membuat objek pembayaran - polimorfisme"""
        print("\nPilih metode pembayaran:")
        print("1. Cash")
        print("2. Debit")
        print("3. Transfer")
        
        pilihan = input("Pilih metode (1/2/3): ")
        while pilihan not in ['1', '2', '3']:
            print("Pilihan tidak valid.")
            pilihan = input("Pilih metode (1/2/3): ")
        
        if pilihan == '1':
            return PembayaranCash()
        elif pilihan == '2':
            return PembayaranDebit()
        else:
            return PembayaranTransfer()
    
    def simpan_data(self):
        """Menyimpan data pemesanan ke file txt dengan status checkout dan pembayaran"""
        with open("data_checkin.txt", "a") as file:
            kamar_info = ""
            for kamar in self.kamar_dipesan:
                kamar_info += f"{kamar.get_tipe()} | {kamar.nomor} | {kamar.harga} | "
            
            if kamar_info.endswith(' | '):
                kamar_info = kamar_info[:-3]
                
            file.write(f"{self.id_transaksi} | {self.nama} | {self.get_nik()} | {self.get_telepon()} | "
                      f"{self.jumlah_pesanan} | {self.waktu_checkin.strftime('%d-%m-%Y %H:%M')} | "
                      f"{self.checkout.strftime('%d-%m-%Y %H:%M')} | {self.lama_menginap} | "
                      f"{self.metode_pembayaran.get_info_pembayaran()} | {self.total_harga} | {self.crash} | "
                      f"{self.status_pembayaran} | {self.sisa_pembayaran} | BELUM | {kamar_info}\n")
    
    def tampil_struk(self):
        # Menggunakan polimorfisme - objek struk yang berbeda dengan interface yang sama
        struk = StrukCheckin(self)
        struk.tampilkan_struk()
    
    def biaya_tambahan(self):
        nik = input("Masukkan NIK untuk proses checkout: ")
        ditemukan = False
        if os.path.exists("data_checkin.txt"):
            with open("data_checkin.txt", "r") as file:
                lines = file.readlines()
            
            for line in lines:
                data = line.strip().split(" | ")
                
                if len(data) >= 14 and data[2] == nik and data[13] == "BELUM":
                    ditemukan = True
                    
                    self.id_transaksi = data[0]
                    self.nama = data[1]
                    self._nik = data[2]
                    self._telepon = data[3]
                    self.jumlah_pesanan = int(data[4])
                    self.waktu_checkin = datetime.datetime.strptime(data[5], "%d-%m-%Y %H:%M")
                    self.checkout = datetime.datetime.strptime(data[6], "%d-%m-%Y %H:%M")
                    self.lama_menginap = int(data[7])
                    
                    # Rekonstruksi objek pembayaran berdasarkan data
                    metode_str = data[8]
                    if metode_str == "Cash":
                        self.metode_pembayaran = PembayaranCash()
                    elif metode_str == "Debit":
                        self.metode_pembayaran = PembayaranDebit()
                    else:
                        self.metode_pembayaran = PembayaranTransfer()
                    
                    self.total_harga_awal = int(data[9])
                    self.crash = int(data[10])
                    self.status_pembayaran = data[11]
                    self.sisa_pembayaran = int(data[12])
                    
                    # Rekonstruksi objek kamar
                    self.kamar_dipesan = []
                    kamar_data = data[14:]
                    
                    for i in range(0, len(kamar_data), 3):
                        if i+2 < len(kamar_data):
                            tipe = kamar_data[i]
                            nomor = kamar_data[i+1]
                            # Membuat objek kamar menggunakan factory - polimorfisme
                            kamar_obj = self.buat_kamar(tipe, nomor)
                            self.kamar_dipesan.append(kamar_obj)
                    
                    print(f"\nData ditemukan untuk: {self.nama}")
                    print(f"Check-out seharusnya: {self.checkout.strftime('%d-%m-%Y 12:00')}")
                    print(f"Total harga kamar: Rp {self.total_harga_awal:,}")
                    print(f"Status pembayaran: {self.status_pembayaran}")
                    
                    if self.status_pembayaran == "DP":
                        print(f"Sisa pembayaran: Rp {self.sisa_pembayaran:,}")
                    
                    jawab = input("\nApakah tamu checkout melebihi jam 12.00? (yes/no): ").lower()
                    if jawab == "yes":
                        jam_terlambat = int(input("Berapa jam keterlambatan? "))
                        self.crash = jam_terlambat * 50000
                        print(f"Biaya keterlambatan: {jam_terlambat} jam x Rp 50,000 = Rp {self.crash:,}")
                    else:
                        self.crash = 0
                        print("Tidak ada biaya keterlambatan.")
                    
                    if self.status_pembayaran == "DP":
                        print("\nTotal yang harus dibayar saat checkout:")
                        print(f"Sisa pembayaran kamar: Rp {self.sisa_pembayaran:,}")
                        print(f"Biaya keterlambatan: Rp {self.crash:,}")
                        total_checkout = self.sisa_pembayaran + self.crash
                        print(f"Total checkout: Rp {total_checkout:,}")
                        
                        if total_checkout > 0:
                            # Pilih metode pembayaran untuk pelunasan - polimorfisme
                            self.metode_pelunasan = self._pilih_metode_pembayaran()
                            self.metode_pelunasan.proses_pembayaran(total_checkout)
                            print("Pembayaran pelunasan berhasil!")
                        
                        self.status_pembayaran = "LUNAS"
                        self.sisa_pembayaran = 0
                    
                    self.total_harga = self.total_harga_awal + self.crash
                    
                    self.update_status_checkout(nik)
                    
                    # Menggunakan polimorfisme untuk menampilkan struk checkout
                    struk_checkout = StrukCheckout(self)
                    struk_checkout.tampilkan_struk()
                    break
            
            if not ditemukan:
                print("Data dengan NIK tersebut tidak ditemukan atau sudah checkout.")
    
    def update_status_checkout(self, nik):
        """Update status checkout menjadi SUDAH dan update pembayaran"""
        if os.path.exists("data_checkin.txt"):
            with open("data_checkin.txt", "r") as file:
                lines = file.readlines()
            
            with open("data_checkin.txt", "w") as file_baru:
                for line in lines:
                    data = line.strip().split(" | ")
                    if len(data) >= 14 and data[2] == nik and data[13] == "BELUM":
                        data[10] = str(self.crash)  
                        data[11] = "LUNAS"  
                        data[12] = "0"  
                        data[13] = "SUDAH" 
                        
                        file_baru.write(" | ".join(data) + "\n")
                        print("Status checkout berhasil diupdate.")
                    else:
                        file_baru.write(line)

def main():
    while True:
        print("\n=== Penginapan Choco ===")
        print("1. Check-in")
        print("2. Checkout")
        print("3. Lihat Status Kamar")
        print("4. Keluar")

        pilihan = input("Pilih menu (1/2/3/4): ")
        if pilihan == "1":
            pemesanan = Pemesanan()
            pemesanan.simpan_data()
            pemesanan.tampil_struk()
        elif pilihan == "2":
            pemesanan = Pemesanan.__new__(Pemesanan)
            pemesanan.biaya_tambahan() 
        elif pilihan == "3":
            kamar = Kamar()
            kamar.tampil_tabel_status_kamar()
        elif pilihan == "4":
            print("Terima kasih telah menggunakan layanan kami.")
            break
        else:
            print("Pilihan tidak valid, coba lagi.")

if __name__ == "__main__":
   main()
